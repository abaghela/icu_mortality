pmap(~sum(is.na(.x))/length(.x))
keep_rows %>% length()
keep_rows[[1]]
keep_rows[[2]]
keep_rows
dat[1,]
dat[1,] %>% View()
dat %>% head() %>% View()
library(tidyverse)
library(magrittr)
library(functionjunction)
# Read in data
dat <- read_csv("./raw_data/widsdatathon2020/training_v2.csv")
# Get an idea of each variable
dat %>% head() %>% View()
dat %>% glimpse()
dat %>%
psych::describe()
dat %>%
group_by(hospital_death) %>%
summarize(n = n())
# Look at variable correlations
dat %>%
select_if(is.numeric) %>%
as.matrix() %>%
cor(use = "pairwise.complete.obs") %>%
na2zero() %>%
pheatmap::pheatmap()
# Remove patients with missing data
keep_cols <- dat %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x < 10) %>%
names()
keep_rows <- dat %>%
pmap(~sum(is.na(.x))/length(.x))
keep_rows
library(tidyverse)
library(magrittr)
library(functionjunction)
# Read in data
dat <- read_csv("./raw_data/widsdatathon2020/training_v2.csv")
# Get an idea of each variable
dat %>% head() %>% View()
dat %>% glimpse()
dat %>%
psych::describe()
dat %>%
group_by(hospital_death) %>%
summarize(n = n())
# Look at variable correlations
dat %>%
select_if(is.numeric) %>%
as.matrix() %>%
cor(use = "pairwise.complete.obs") %>%
na2zero() %>%
pheatmap::pheatmap()
# Remove patients with missing data
keep_cols <- dat %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x < 10) %>%
names()
keep_rows <- dat %>%
pmap(~sum(is.na(.x))/length(.x))
keep_rows %>% head()
dat[1,] %>% View()
keep_rows <- dat %>%
rowwise %>%
summarise(sum(is.na(.)))
rm(keep_rows)
keep_rows <- dat %>%
rowwise %>%
summarise(sum(is.na(.)))
keep_rows <- dat %>%
apply( MARGIN = 1, function(x) sum(is.na(x)))
dat[3,] %>% View()
dat[c(2:3),] %>% View()
keep_rows <- dat %>%
apply( MARGIN = 1, function(x) sum(is.na(x))/length(x) )
keep_rows %>% head()
keep_rows <- dat %>%
apply( MARGIN = 1, function(x) (sum(is.na(x))/length(x))*100 ) %>%
map(~.x < 20)
keep_rows %>% head()
keep_rows <- dat %>%
apply( MARGIN = 1, function(x) (sum(is.na(x))/length(x))*100 ) %>%
map(~.x < 20) %>%
keep(~.x)
keep_rows %>% head()
keep_rows <- dat %>%
apply( MARGIN = 1, function(x) (sum(is.na(x))/length(x))*100 ) %>%
as.list() #%>%
keep_rows %>% head()
keep_rows <- dat %>%
apply( MARGIN = 1, function(x) (sum(is.na(x))/length(x))*100 ) %>%
as.list() %>%
map(~.x < 20) #%>%
keep_rows %>% head()
keep_rows <- dat %>%
apply( MARGIN = 1, function(x) (sum(is.na(x))/length(x))*100 ) %>%
as.list() %>%
map(~.x < 20) %>%
keep(~.x)
keep_rows %>% head()
keep_rows %>% length()
keep_rows <- rowSums(is.na(dat))
keep_rows %>% head()
keep_rows <- rowSums(is.na(dat))/ncol(dat)
keep_rows <- (rowSums(is.na(dat))/ncol(dat))*100
keep_rows %>% head()
keep_rows <- (rowSums(is.na(dat))/ncol(dat))*100 < 20
keep_rows %>% head()
dat_filt <- dat %>%
dplyr::select(one_of(keep_cols))
keep_rows <- (rowSums(is.na(dat_filt))/ncol(dat_filt))*100 < 20
keep_rows %>% head()
keep_rows %>% table(0)
keep_rows %>% table()
# Remove patients with missing data
keep_cols <- dat %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x < 10) %>%
names()
dat_filt <- dat %>%
dplyr::select(one_of(keep_cols))
keep_rows <- (rowSums(is.na(dat_filt))/ncol(dat_filt))*100 < 10
keep_rows %>% table()
dat_filt <- dat_filt[keep_rows,]
dat_filt %>% dim()
# Remove patients with missing data
filt_sparse_rows_cols <- function(df, col_perc_max = 10, row_perc_max = 10) {
# Filter columnns first
keep_cols <- df %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x <= col_perc_max) %>%
names()
df_filt <- df %>%
dplyr::select(one_of(keep_cols))
keep_rows <- (rowSums(is.na(dat_filt))/ncol(dat_filt))*100 < 10
df_filt <- df_filt[keep_rows,]
}
# Remove patients with missing data
filt_sparse_rows_cols <- function(df, col_perc_max = 10, row_perc_max = 10) {
# Filter columnns first
keep_cols <- df %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x <= col_perc_max) %>%
names()
df_filt <- df %>%
dplyr::select(one_of(keep_cols))
# Filter rows now
keep_rows <- (rowSums(is.na(dat_filt))/ncol(dat_filt))*100 < row_perc_max
df_filt <- df_filt[keep_rows,]
return(df_filt)
}
dat_filt <- dat %>%
filt_sparse_rows_cols()
# Remove patients with missing data
filt_sparse_rows_cols <- function(df, col_perc_max = 10, row_perc_max = 10) {
# Filter columnns first
keep_cols <- df %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x <= col_perc_max) %>%
names()
df_filt <- df %>%
dplyr::select(one_of(keep_cols))
# Filter rows now
keep_rows <- (rowSums(is.na(df_filt))/ncol(df_filt))*100 < row_perc_max
df_filt <- df_filt[keep_rows,]
return(df_filt)
}
dat_filt <- dat %>%
filt_sparse_rows_cols()
dat_filt %>% dim(0)
dat_filt %>% dim()
filt_sparse_rows_cols_2 <- function(df, col_perc_max = 10, row_perc_max = 10) {
# Filter rows now
keep_rows <- (rowSums(is.na(df))/ncol(df))*100 < row_perc_max
df_filt <- df[keep_rows,]
# Filter columnns first
keep_cols <- df_filt %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x <= col_perc_max) %>%
names()
df_filt <- df_filt %>%
dplyr::select(one_of(keep_cols))
return(df_filt)
}
dat_filt_2 <- dat %>%
filt_sparse_rows_cols_2()
# Remove patients with missing data
filt_sparse_rows_cols <- function(df, col_perc_max = 10, row_perc_max = 10) {
# Filter columnns first
keep_cols <- df %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x <= col_perc_max) %>%
names()
df_filt <- df %>%
dplyr::select(one_of(keep_cols))
# Filter rows now
keep_rows <- (rowSums(is.na(df_filt))/ncol(df_filt))*100 < row_perc_max
df_filt <- df_filt[keep_rows,]
return(df_filt)
}
dat_filt <- dat %>%
filt_sparse_rows_cols()
rm(dat_filt_2)
rm(keep_cols)
rm(keep_rows)
rm(filt_sparse_rows_cols_2())
rm(filt_sparse_rows_cols_2
)
# Missing data
dat_filt %>%
#select_if(is.numeric) %>%
as.matrix() %>%
cor(use = "pairwise.complete.obs") %>%
na2zero() %>%
pheatmap::pheatmap()
# Missing data
dat_filt %>%
select_if(is.numeric) %>%
as.matrix() %>%
cor(use = "pairwise.complete.obs") %>%
na2zero() %>%
pheatmap::pheatmap()
dat_filt %>% dim()
dat_filt %>%
group_by(hospital_death) %>%
summarize(n = n())
dat %>% glimpse()
dat$patient_id %>% unique() %>% length()
dat %>% nrow()
# Univariate comparison of select variables between died/survived
dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id", "patient_id", "hospital_id", "icu_id")) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>% head()
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived"))
hi %>% head()
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-patient_id, -hospital_death, names_to = "variable")
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(names_to = "variable")
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-patient_id, names_to = "variable")
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-patient_id,-hospital_death, names_to = "variable")
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(c("patient_id","hospital_death"), names_to = "variable")
hi %>% head()
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable")
hi %>% head()
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ broom::tidy(lm(hospital_death ~ value, data = .x)))
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ broom::tidy(lm(hospital_death ~ value, data = .x, na.action = na.exclude)))
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ broom::tidy(lm(hospital_death ~ value, data = .x, na.action = na.omit)))
rm(hi)
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ broom::tidy(lm(hospital_death ~ value, data = .x, na.action = na.omit)))
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ broom::tidy(lm(value ~ hospital_death, data = .x, na.action = na.omit)))
hi[[1]]
hi[[2]]
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_modify(~ broom::tidy(lm(value ~ hospital_death, data = .x, na.action = na.omit)))
hi %>% head()
hey <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_modify(~ lm(value ~ hospital_death, data = .x, na.action = na.omit))
hey <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ lm(value ~ hospital_death, data = .x, na.action = na.omit))
hey[[1]]
hi[1,]
hi[c(1,2),]
hey <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ broom::glance(lm(value ~ hospital_death, data = .x, na.action = na.omit)))
hey[[1]]
library(tidyverse)
library(magrittr)
library(functionjunction)
# Read in data
dat <- read_csv("./raw_data/widsdatathon2020/training_v2.csv")
# Get an idea of each variable
dat %>% head() %>% View()
dat %>% glimpse()
dat %>%
psych::describe()
dat %>%
group_by(hospital_death) %>%
summarize(n = n())
dat %>% nrow()
dat$patient_id %>% unique() %>% length()
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_modify(~ broom::tidy(lm(value ~ hospital_death, data = .x, na.action = na.omit)))
hi %>% head()
hi %>% head()
hi %>% dim()
hi %>% View()
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable")
hi %>% head()
hi$hospital_death %>% head()
hi$hospital_death %>% unique()
# Univariate comparison of select variables between died/survived
hi <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
mutate(hospital_death = factor(hospital_death, levels = c("survived", "died"))) %>%
group_by(variable) %>%
group_modify(~ broom::tidy(lm(value ~ hospital_death, data = .x, na.action = na.omit)))
hi %>% View()
# Univariate comparison of select variables between died/survived
var_t_test <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
mutate(hospital_death = factor(hospital_death, levels = c("survived", "died"))) %>%
group_by(variable) %>%
group_modify(~ broom::tidy(lm(value ~ hospital_death, data = .x, na.action = na.omit)))
var_t_test$term
var_t_test %>% View()
var_t_test %>%
filter(term == c("(Intercept)")) %>%
filter(p.value <= 0.01)
var_t_test %>%
filter(!term == c("(Intercept)")) %>%
filter(p.value <= 0.01)
var_t_test %>%
filter(!term == c("(Intercept)")) %>%
filter(p.value <= 0.01) %>% View()
hey <- dat %>%
select_if(is.numeric) %>%
select(-one_of("encounter_id",  "hospital_id", "icu_id")) %>%
mutate(patient_id = as.character(patient_id)) %>%
mutate(hospital_death = ifelse(hospital_death == 1, "died", "survived")) %>%
pivot_longer(-c("patient_id","hospital_death"), names_to = "variable") %>%
group_by(variable) %>%
group_map(~ broom::glance(lm(value ~ hospital_death, data = .x, na.action = na.omit)))
hey %>% View()
# Look at variable correlations
dat %>%
select_if(is.numeric) %>%
as.matrix() %>%
cor(use = "pairwise.complete.obs") %>%
na2zero() %>%
pheatmap::pheatmap()
# Remove patients with missing data
filt_sparse_rows_cols <- function(df, col_perc_max = 10, row_perc_max = 10) {
# Filter columnns first
keep_cols <- df %>%
map(~sum(is.na(.x))/length(.x)) %>%
map(~.x*100) %>%
keep(~.x <= col_perc_max) %>%
names()
df_filt <- df %>%
dplyr::select(one_of(keep_cols))
# Filter rows now
keep_rows <- (rowSums(is.na(df_filt))/ncol(df_filt))*100 < row_perc_max
df_filt <- df_filt[keep_rows,]
return(df_filt)
}
dat_filt <- dat %>%
filt_sparse_rows_cols()
dat_filt %>%
group_by(hospital_death) %>%
summarize(n = n())
dat_filt %>%
group_by(hospital_death) %>%
summarize(n = n())
source("./scripts/helper_functions.R")
# Remove patients with missing data
dat_filt <- dat %>% filt_sparse_rows_cols()
library(tidyverse)
library(magrittr)
library(functionjunction)
source("./scripts/helper_functions.R")
# Read in data
dat <- read_csv("./raw_data/widsdatathon2020/training_v2.csv")
dat %>% glimpse()
# Get an idea of each variable
dat %>% head() %>% View()
dat$patient_id %>% unique() %>% length()
library(reticulate)
repl_python()
repl_python()
library(reticulate)
repl_python()
py_run_string("import numpy as np")
repl_python()
library(reticulate)
use_python("usr/local/bin/python")
